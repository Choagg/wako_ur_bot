import requests
from bs4 import BeautifulSoup
from telegram import Update
from telegram.ext import Application, CommandHandler
import logging

# K√≠ch ho·∫°t logging ƒë·ªÉ theo d√µi l·ªói
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# C·∫•u h√¨nh Token v√† Chat ID
TOKEN = "7438273610:AAEOwwV6k81kmLCpr88BS5yVAUSK0F59K7A"
CHAT_ID = "5416288081"

# H√†m l·∫•y danh s√°ch cƒÉn h·ªô t·ª´ UR Wakoshi
def check_ur_housing():
    URL = "https://www.ur-net.go.jp/chintai/sp/kanto/saitama/result/?skcs=229&skcs=229&tdfk=11&todofuken=saitama"
    response = requests.get(URL)
    soup = BeautifulSoup(response.text, 'html.parser')

    listings = soup.find_all("div", class_="p-search-list-item__header")  # C·∫≠p nh·∫≠t selector n·∫øu c·∫ßn
    
    new_houses = []
    for listing in listings:
        title = listing.get_text(strip=True)
        new_houses.append(title)

    print(new_houses)  # In k·∫øt qu·∫£ ra console ƒë·ªÉ ki·ªÉm tra
    return new_houses
import requests
from bs4 import BeautifulSoup

def check_vacant_rooms():
    # ƒê·ªãa ch·ªâ URL c·ªßa trang web
    URL = "https://www.ur-net.go.jp/chintai/sp/kanto/saitama/result/?skcs=229&skcs=229&tdfk=11&todofuken=saitama"
    
    # G·ª≠i y√™u c·∫ßu GET ƒë·ªÉ t·∫£i trang web
    response = requests.get(URL)
    
    # Ph√¢n t√≠ch c√∫ ph√°p HTML c·ªßa trang web
    soup = BeautifulSoup(response.text, 'html.parser')
    
    # T√¨m ph·∫ßn t·ª≠ ch·ª©a s·ªë cƒÉn h·ªô tr·ªëng
    vacancy_section = soup.find("dl", class_="cassettes_property_vacancy module_boxsvertical_blue")
    
    if vacancy_section:
        # T√¨m s·ªë cƒÉn h·ªô tr·ªëng
        vacant_rooms = vacancy_section.find("strong", class_="rep_bukken-count-room")
        
        if vacant_rooms:
            return vacant_rooms.get_text(strip=True)
    
    return "Kh√¥ng t√¨m th·∫•y th√¥ng tin cƒÉn h·ªô tr·ªëng"
import requests
from bs4 import BeautifulSoup

# URL c·ªßa trang web b·∫°n mu·ªën l·∫•y th√¥ng tin
URL = "https://www.ur-net.go.jp/chintai/sp/kanto/saitama/result/?skcs=229&skcs=229&tdfk=11&todofuken=saitama"
      # Thay th·∫ø b·∫±ng URL ch√≠nh x√°c c·ªßa trang b·∫°n mu·ªën ki·ªÉm tra

def get_vacancy_count():
    response = requests.get(URL)

    if response.status_code == 200:
        soup = BeautifulSoup(response.text, 'html.parser')

        # Ki·ªÉm tra to√†n b·ªô HTML c·ªßa trang ƒë·ªÉ xem li·ªáu c√≥ ph·∫ßn t·ª≠ 'rep_bukken-count-room' kh√¥ng
        print(soup.prettify())  # In ra HTML trang web ƒë·ªÉ b·∫°n c√≥ th·ªÉ ki·ªÉm tra

        vacancy_count = soup.find('strong', class_='rep_bukken-count-room')
        
        if vacancy_count:
            return vacancy_count.text.strip()
        else:
            return "Kh√¥ng t√¨m th·∫•y th√¥ng tin ph√≤ng tr·ªëng."
    else:
        return "L·ªói khi truy c·∫≠p trang web."

# Ki·ªÉm tra h√†m l·∫•y s·ªë cƒÉn tr·ªëng
print(get_vacancy_count())
# Ki·ªÉm tra s·ªë cƒÉn h·ªô tr·ªëng v√† in ra k·∫øt qu·∫£
vacant_rooms = check_vacant_rooms()
print("S·ªë cƒÉn h·ªô tr·ªëng:", vacant_rooms)
# H√†m g·ª≠i th√¥ng b√°o v·ªÅ cƒÉn h·ªô tr·ªëng
async def send_alert(update: Update, context):
    houses = check_ur_housing()  # L·∫•y danh s√°ch cƒÉn h·ªô tr·ªëng
    if houses:
        message = "üè† Danh s√°ch nh√† m·ªõi UR t·∫°i Wak≈çshi:\n\n" + "\n".join(houses)
        await update.message.reply_text(message)
    else:
        await update.message.reply_text("Hi·ªán t·∫°i kh√¥ng c√≥ nh√† m·ªõi.")

# H√†m g·ª≠i th√¥ng b√°o t·ª± ƒë·ªông qua JobQueue
async def send_alert_job(context):
    houses = check_ur_housing()
    if houses:
        message = "üè† Danh s√°ch nh√† m·ªõi UR t·∫°i Wak≈çshi:\n\n" + "\n".join(houses)
        await context.bot.send_message(chat_id=CHAT_ID, text=message)
    else:
        await context.bot.send_message(chat_id=CHAT_ID, text="Hi·ªán t·∫°i kh√¥ng c√≥ nh√† m·ªõi.")

# C·∫•u h√¨nh Application v√† c√°c handler
def main():
    # T·∫°o ·ª©ng d·ª•ng v·ªõi bot token
    application = Application.builder().token(TOKEN).build()

    # Th√™m handler cho l·ªánh /check
    application.add_handler(CommandHandler("check", send_alert))

    # T·∫°o JobQueue ƒë·ªÉ g·ª≠i th√¥ng b√°o t·ª± ƒë·ªông m·ªói 10 ph√∫t
    application.job_queue.run_repeating(send_alert_job, interval=600, first=0)  # Interval 600 gi√¢y = 10 ph√∫t

    # Ch·∫°y bot
    application.run_polling()

if __name__ == '__main__':
    main()
